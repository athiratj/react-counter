{"version":3,"sources":["components/Counter.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","state","count","isCounting","isModalOpen","this","clearInterval","timerID","setState","setInterval","tick","modal","className","onClick","handleClickClose","class","handleClickDecrement","id","handleClickIncrement","handleClickCounter","handleClickReset","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OAwJeA,E,kDArJb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,GACPC,YAAY,EACZC,aAAa,GALE,E,iEASG,IAAD,OACfC,KAAKJ,MAAME,YACbG,cAAcD,KAAKE,SACnBF,KAAKG,SAAS,CAAEL,YAAY,KAE5BE,KAAKE,QAAUE,aAAY,kBAAM,EAAKC,SAAQ,O,6CAKhDJ,cAAcD,KAAKE,W,6CAInBF,KAAKG,SAAS,CACZN,MAAOG,KAAKJ,MAAMC,MAAQ,M,6CAI5BG,KAAKG,SAAS,CACZN,MAAOG,KAAKJ,MAAMC,MAAQ,IAExBG,KAAKJ,MAAMC,OAAS,GACtBG,KAAKG,SAAS,CACZN,MAAO,EACPE,aAAa,M,yCAKjBC,KAAKG,SAAS,CACZN,MAAO,O,yCAKTG,KAAKG,SAAS,CAAEJ,aAAa,M,6BAIzBC,KAAKJ,MAAMC,OAAS,GACtBI,cAAcD,KAAKE,SACnBF,KAAKG,SAAS,CACZN,MAAO,GACPC,YAAY,EACZC,aAAa,KAGfC,KAAKG,SAAS,CACZL,YAAY,EACZD,MAAOG,KAAKJ,MAAMC,MAAQ,M,+BAKtB,IACJS,EADG,OA0BP,OAxBIN,KAAKJ,MAAMG,cACbO,EACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,gBAAf,SACA,yBAAKA,UAAU,iBACb,gDAGF,yBAAKA,UAAU,eACb,4BACEA,UAAU,kBACVC,QAAS,WACP,EAAKC,qBAHT,aAeR,6BACE,gCACE,yBAAKC,MAAM,UACT,4BACE,4BACE,2CAKPJ,EACD,yBAAKI,MAAM,aACT,yBAAKA,MAAM,kBACT,4BACEF,QAAS,WACP,EAAKG,wBAEPD,MAAM,sCAJR,KAQA,0BAAME,GAAG,QAAQF,MAAM,cACpBV,KAAKJ,MAAMC,OAEd,4BACEW,QAAS,WACP,EAAKK,wBAEPH,MAAM,sCAJR,MASF,yBAAKA,MAAM,iBACT,4BACEF,QAAS,WACP,EAAKM,sBAEPF,GAAG,MACHF,MAAM,uBAELV,KAAKJ,MAAME,WAAa,OAAS,SAEpC,+BACA,4BACEU,QAAS,WACP,EAAKO,oBAEPL,MAAM,qBAJR,gB,GAxIUM,IAAMC,WCUbC,MARf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,QCKcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.78552029.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Counter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      count: 10,\r\n      isCounting: false,\r\n      isModalOpen: false,\r\n    };\r\n  }\r\n\r\n  handleClickCounter() {\r\n    if (this.state.isCounting) {\r\n      clearInterval(this.timerID);\r\n      this.setState({ isCounting: false });\r\n    } else {\r\n      this.timerID = setInterval(() => this.tick(), 1000);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  handleClickIncrement() {\r\n    this.setState({\r\n      count: this.state.count + 1,\r\n    });\r\n  }\r\n  handleClickDecrement() {\r\n    this.setState({\r\n      count: this.state.count - 1,\r\n    });\r\n    if (this.state.count <= 0) {\r\n      this.setState({\r\n        count: 0,\r\n        isModalOpen: true,\r\n      });\r\n    }\r\n  }\r\n  handleClickReset() {\r\n    this.setState({\r\n      count: 10,\r\n    });\r\n  }\r\n  //handleClickClose method\r\n  handleClickClose() {\r\n    this.setState({ isModalOpen: false });\r\n  }\r\n\r\n  tick() {\r\n    if (this.state.count <= 0) {\r\n      clearInterval(this.timerID);\r\n      this.setState({\r\n        count: 10,\r\n        isCounting: false,\r\n        isModalOpen: true,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        isCounting: true,\r\n        count: this.state.count - 1,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let modal;\r\n    if (this.state.isModalOpen) {\r\n      modal = (\r\n        <div className=\"modal\">\r\n          <div className=\"modal-inner\">\r\n            <div className=\"modal-header\">Alert</div>\r\n            <div className=\"modal-message\">\r\n              <p>Count reached 0!</p>\r\n            </div>\r\n            {/* onClick event */}\r\n            <div className=\"modal-close\">\r\n              <button\r\n                className=\"modal-close-btn\"\r\n                onClick={() => {\r\n                  this.handleClickClose();\r\n                }}\r\n              >\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <header>\r\n          <nav class=\"navbar\">\r\n            <ul>\r\n              <li>\r\n                <h1>Counter</h1>\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n        </header>\r\n        {modal}\r\n        <div class=\"container\">\r\n          <div class=\"flex-container\">\r\n            <button\r\n              onClick={() => {\r\n                this.handleClickDecrement();\r\n              }}\r\n              class=\"flex-items button clicked decrease\"\r\n            >\r\n              -\r\n            </button>\r\n            <span id=\"value\" class=\"flex-items\">\r\n              {this.state.count}\r\n            </span>\r\n            <button\r\n              onClick={() => {\r\n                this.handleClickIncrement();\r\n              }}\r\n              class=\"flex-items button clicked increase\"\r\n            >\r\n              +\r\n            </button>\r\n          </div>\r\n          <div class=\"btn-container\">\r\n            <button\r\n              onClick={() => {\r\n                this.handleClickCounter();\r\n              }}\r\n              id=\"btn\"\r\n              class=\"btn clicked counter\"\r\n            >\r\n              {this.state.isCounting ? \"Stop\" : \"Start\"}\r\n            </button>\r\n            <span></span>\r\n            <button\r\n              onClick={() => {\r\n                this.handleClickReset();\r\n              }}\r\n              class=\"btn clicked reset\"\r\n            >\r\n              Reset\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Counter;\r\n","import React from 'react';\nimport './App.css';\nimport Counter from './components/Counter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}